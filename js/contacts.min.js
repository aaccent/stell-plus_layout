/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/contacts.js":
/*!****************************!*\
  !*** ./src/js/contacts.js ***!
  \****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nfunction init() {\n    const getCoords = async () => {\n        // let response = await fetch(\"../json/coords.json\", {\n        //     method: \"GET\"\n        // });\n\n        setTimeout(() => {\n            mapPins = JSON.parse(`\n                [\n                    {\n                        \"id\": \"1\",\n                        \"title\": \"Центральный офис\",\n                        \"image\": \"./images/contacts/balloon-image.png\",\n                        \"address\": \"Москва, ул. Палехская, д. 131, пом. 1, ком. 10\",\n                        \"time\": \"Пн-Пт: c 09:00 до 18:00\",\n                        \"email\": \"info@stellplus.com\",\n                        \"phone\": \"+74959970687\",\n                        \"coord\": [55.75, 37.50]\n                    },\n                    {\n                        \"id\": \"2\",\n                        \"title\": \"Восточный офис\",\n                        \"image\": \"./images/contacts/balloon-image.png\",\n                        \"address\": \"Москва, ул. Палехская, д. 131, пом. 1, ком. 10\",\n                        \"time\": \"Пн-Пт: c 09:00 до 18:00\",\n                        \"email\": \"info@stellplus.com\",\n                        \"phone\": \"+74959970687\",\n                        \"coord\": [55.75, 37.71]\n                    },\n                    {\n                        \"id\": \"3\",\n                        \"title\": \"Южный офис\",\n                        \"image\": \"./images/contacts/balloon-image.png\",\n                        \"address\": \"Москва, ул. Палехская, д. 131, пом. 1, ком. 10\",\n                        \"time\": \"Пн-Пт: c 09:00 до 18:00\",\n                        \"email\": \"info@stellplus.com\",\n                        \"phone\": \"+74959970687\",\n                        \"coord\": [55.70, 37.70]\n                    }\n                ]            \n            `)\n            setMapPins(mapPins)\n        }, 2000)\n\n        // if (response.ok) {\n        //     let mapPins = await response.json()\n        //     setMapPins(mapPins)\n        // } else {\n        //     console.log(\"Error!!!\")\n        // }\n    }\n\n    function setMapPins(pins) {\n        let myCollection = new ymaps.GeoObjectCollection();\n        \n        // создание и установка пинов\n        for (var i = 0; i < pins.length; i++) {\n            myCollection.add(new ymaps.Placemark(pins[i].coord, {\n                pinData: pins[i]\n            }, {\n                iconLayout: \"default#image\",\n                iconImageHref: i === 0 ? imagesSrc.pinActiveImage : imagesSrc.pinImage,\n                iconImageSize: [60, 60],\n            }));\n        }\n        // добавление пинов на карту\n        map.geoObjects.add(myCollection);\n\n        // обработки кликов по пинам на карте\n        let activePinId;\n        myCollection.events.add(\"click\", e => {\n            let pinData = e.get(\"target\").properties.get(\"pinData\");\n            if (activePinId === pinData.id) {\n                return\n            }\n            let query = ymaps.geoQuery(map.geoObjects);\n\n            for (let i = 0; i < query.getLength(); i++) {\n                let el = query.get(i);\n                el.options.set('iconImageHref', imagesSrc.pinImage)                \n            }\n\n            // установка пина по центру карты\n            map.panTo(pinData.coord, { duration: 300 })\n            \n            e.get('target').options.set('iconImageHref', imagesSrc.pinActiveImage)  \n\n            const balloonEl = document.querySelector(\".balloon\")\n            if (balloonEl.classList.contains(\"balloon_open\")) {\n                let balloonContentEl = balloonEl.querySelector(\".balloon__content\")\n                balloonContentEl.style.opacity = \"0\"\n                balloonContentEl.addEventListener(\"transitionend\", (e) => {\n                    loadBalloon(pinData)\n                    e.target.style.opacity = \"\"\n                })\n            } else {\n                balloonEl.classList.add(\"balloon_open\")            \n            }\n            activePinId = pinData.id\n        })\n        // первоначальная инициализация карты\n        loadBalloon(mapPins[0])\n        document.querySelector(\".balloon\").classList.add(\"balloon_open\")\n        map.panTo(mapPins[0].coord, { duration: 150 })\n    }\n\n    function loadBalloon(data) {\n        let balloonHeaderTemplate = `<h4 class=\"balloon__title\">${data.title}</h4>`\n        let balloonImageTemplate = `\n            <div class=\"balloon__img\">\n                <img src=\"${data.image}\" alt=\"\">\n            </div>`\n        let balloonInfoTemplate = `\n            <div class=\"balloon__info\"> \n                <div class=\"balloon__address\">\n                    <span class=\"icon-map-pin\"></span>\n                    <span>${data.address}</span>\n                </div>\n                <div class=\"balloon__time\">\n                    <span class=\"icon-clock\"></span>\n                    <span>${data.time}</span>\n                </div>\n                <div class=\"balloon__phone\">\n                    <span class=\"icon-phone\"> </span>\n                    <a href=\"tel:${data.phone}\">${data.phone} </a>\n                </div>\n                <div class=\"balloon__email\">\n                    <span class=\"icon-email\"></span>\n                    <a href=\"mailto:${data.email}\">${data.email}</a>\n                </div>\n            </div>\n        `\n        let balloonLinkTemplate = `\n            <a \n                class=\"balloon__link link\" \n                href=\"https://yandex.com/maps/?mode=routes&rtext=~${data.coord[0]}%2C${data.coord[1]}&rtt=auto\"\n                target=\"_blank\"\n            >Проложить маршрут</a>`\n        let balloonContentTemplate = `\n            <div class=\"balloon__content\">\n                ${balloonHeaderTemplate}\n                ${balloonImageTemplate}\n                ${balloonInfoTemplate}\n                ${balloonLinkTemplate}\n            </div>\n        `\n        document.getElementById(\"balloon\").innerHTML = balloonContentTemplate\n    }\n\n    let mapPins;\n    // создание карты\n    let map = new ymaps.Map(\"map\", {\n        center: [55.75,37.60],\n        controls: [],\n        zoom: 12,\n    }, {\n        minZoom: 12\n    })\n\n    let imagesSrc = document.getElementById(\"map\").dataset\n\n    // Создадим пользовательский макет ползунка масштаба.\n    let ZoomLayout = ymaps.templateLayoutFactory.createClass(`\n        <div id=\"zoom-controls\">\n            <button id='zoom-out' type='button' disabled><img src='${imagesSrc.zoomOutImage}'></button>\n            <button id='zoom-in' type='button'><img src='${imagesSrc.zoomInImage}'></button>\n        </div>`, {\n\n        // Переопределяем методы макета, чтобы выполнять дополнительные действия\n        // при построении и очистке макета.\n        build: function () {\n            // Вызываем родительский метод build.\n            ZoomLayout.superclass.build.call(this);\n\n            // Привязываем функции-обработчики к контексту и сохраняем ссылки\n            // на них, чтобы потом отписаться от событий.\n            this.zoomInCallback = ymaps.util.bind(this.zoomIn, this);\n            this.zoomOutCallback = ymaps.util.bind(this.zoomOut, this);\n\n            // Начинаем слушать клики на кнопках макета.\n            document.getElementById(\"zoom-in\").addEventListener('click', this.zoomInCallback);\n            document.getElementById(\"zoom-out\").addEventListener('click', this.zoomOutCallback);\n        },\n\n        clear: function () {\n            // Снимаем обработчики кликов.\n            document.getElementById('zoom-in').removeEventListener('click', this.zoomInCallback);\n            document.getElementById('zoom-out').removeEventListener('click', this.zoomOutCallback);\n\n            // Вызываем родительский метод clear.\n            ZoomLayout.superclass.clear.call(this);\n        },\n\n        zoomIn: function () {\n            let map = this.getData().control.getMap();\n            map.setZoom(map.getZoom() + 1, {checkZoomRange: true, duration: 300});\n            if (map.getZoom() >= 12) {\n                document.getElementById(\"zoom-out\").disabled = false\n            }\n        },\n\n        zoomOut: function () {\n            let map = this.getData().control.getMap();\n            map.setZoom(map.getZoom() - 1, {checkZoomRange: true, duration: 300});\n            if (map.getZoom() <= 13) {\n                document.getElementById(\"zoom-out\").disabled = true\n            }\n        }\n    });\n\n    let zoomControl = new ymaps.control.ZoomControl({\n        options: {\n            layout: ZoomLayout,\n            position: {\n                right: \"2%\",\n                bottom: 32\n            } \n        }\n    });\n\n    map.controls.add(zoomControl);\n    getCoords()\n    \n    map.events.add(\"click\", () =>  {\n        let query = ymaps.geoQuery(map.geoObjects);\n\n        for (let i = 0; i < query.getLength(); i++) {\n            let el = query.get(i);\n            el.options.set('iconImageHref', imagesSrc.pinImage)                \n        }\n        document.getElementById(\"balloon\").classList.remove(\"balloon_open\")\n    })\n    \n    \n    // zoom ctrl + mouse wheel\n    let ctrlKey = false\n    let body = document.getElementsByTagName('body')[0];\n    map.behaviors.disable(['scrollZoom']);\n    body.onkeydown = callbackDown;\n    body.onkeyup = callbackUp;\n    function callbackDown(e){\n        if(e.keyCode === 17 && !ctrlKey){\n            ctrlKey = true\n            map.behaviors.enable(['scrollZoom']);\n        }\n    }\n    function callbackUp(e){\n        if(e.keyCode === 17){\n            ctrlKey = false\n            map.behaviors.disable(['scrollZoom']);\n        }\n    }\n}\n\ndocument.querySelectorAll(\".departments-section__tab-button\").forEach(tabButtonEl => {\n    tabButtonEl.addEventListener(\"click\", e => {\n        let targetEl = e.target;\n        let departmentName = targetEl.dataset.department;\n        let departmentsContainer = document.querySelector(\".departments-section__departments\");\n        \n        document.querySelector(\".departments-section__tab-button_active\").classList.remove(\"departments-section__tab-button_active\")\n        targetEl.classList.add(\"departments-section__tab-button_active\")\n        \n        departmentsContainer.style.opacity = \"0\"\n        departmentsContainer.addEventListener(\"transitionend\", () => {\n            let activeDepartmentClass = \"departments-section__department_active\"\n            departmentsContainer.querySelector(\".\" + activeDepartmentClass).classList.remove(activeDepartmentClass)\n            departmentsContainer.style.opacity = \"\"\n            departmentsContainer.querySelector(\".departments-section__department_\" + departmentName).classList.add(activeDepartmentClass);\n        \n        }, { once: true })\n\n    })\n})\n\n// if (ymaps !== undefined) {\n//     ymaps.ready(init);\n// }\n\n\n// animations\n\ngsap.from(\".section__info button, .section__info > div\", {\n    scrollTrigger: {\n        trigger: \".section__info\",\n        start: \"top 80%\"\n    },\n    yPercent: 30,\n    opacity: 0,\n    duration: 0.5,\n    stagger: {\n        amount: 0.4\n    }\n})\n\nlet employeeMatchMedia = gsap.matchMedia()\nlet employeeEls = gsap.utils.toArray(\".departments-section__department_active .employee\")\nlet paddingValue = window.innerWidth - document.documentElement.clientWidth;\n\nemployeeMatchMedia.add({\n    oneColumn: `(max-width: 615px)`,\n    twoColumn: `(max-width: ${987 + paddingValue}px)`,\n    threeColum: `(max-width: ${1307 + paddingValue}px)`,\n    fourColumn: `(min-width: ${1308 + paddingValue}px)`\n}, context => {\n    let { oneColumn, twoColumn, threeColum } = context.conditions\n    employeeEls.forEach((employeeEl, i) => {\n        let tl = gsap.timeline({\n            scrollTrigger: {\n                trigger: employeeEl,\n                start: \"top 90%\"\n            },\n            delay: () => {\n                if (oneColumn) {\n                    return 0\n                }\n                if (twoColumn) {\n                    return 0.2 * (i % 2)\n                }\n                if (threeColum) {\n                    return 0.2 * (i % 3)\n                }\n                return 0.2 * (i % 4)\n            },\n        })\n        tl.from(employeeEl.querySelector(\"img\"), {\n            scale: 1.3,\n            duration: 2.25,\n            ease: \"cubic-bezier(0.38, 0.005, 0.215, 1)\"\n        })\n        tl.from(employeeEl.querySelector(\"img\"), {\n            opacity: 0,\n            duration: 0.9,\n            ease: \"cubic-bezier(0.38, 0.005, 0.215, 1)\"\n        }, \"<\")\n        tl.from(employeeEl.querySelectorAll(\".employee__position, .employee__name, .employee__email\"), {\n            yPercent: 100,\n            opacity: 0,\n            duration: 0.5,\n        }, \">\") \n        // gsap.from(employeeEl, {\n        //     scrollTrigger: {\n        //         trigger: employeeEl,\n        //         start: \"top 80%\"\n        //     },\n        //     y: 100,\n        //     opacity: 0,\n        //     duration: 0.5,\n        //     delay: () => {\n        //         if (oneColumn) {\n        //             return 0\n        //         }\n        //         if (twoColumn) {\n        //             return 0.2 * (i % 2)\n        //         }\n        //         if (threeColum) {\n        //             return 0.2 * (i % 3)\n        //         }\n        //         return 0.2 * (i % 4)\n        //     },\n        //     // stagger: {\n        //     //     amount: 0.4\n        //     // }\n        // })\n    })\n})\n\n\n//# sourceURL=webpack://gulp-start/./src/js/contacts.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/contacts.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;